Jake Pitkin - u0891770
CS 6490 - Network Security
Programming Assignment 4


----------
Code Organization
----------

My program in written using Python3. 
I used the OpenSSL library to create certificates and public/private key pairs.
I used the PyCryptodome library for nonce generation, hashing, and encryption/decryption.

client.py - The client in the data exchange. Initiates the handshake with the server. 
Once a secure connection is established, receives the 50 Kbyte data file.

server.py - The server in the data exchanges. Waits for a client to contact them.
After handshaking, sends the client a 50 Kbyte data file over the secure connection.

util.py - I/O, certificate generation, hashing, and encryption functions. A collection
of wrappers around the OpenSSL and PyCryptodome libraries.

-----------
Protocol - handshake
-----------
Client and Server get their certificates and key pairs, which are written to file.

Client M1: Sends the client's certificate along with a preference for the RSA scheme.

Server M1: Sends the server's certificate along with a nonce encrypted 
           with the client's public key C_PUB{R_SERVER}.

Client M2: Client creates R_CLIENT and decrypts C_PUB{R_SERVER}. Using R_CLIENT and R_SERVER,
           the master secret is generated K = R_SERVER XOR R_CLIENT. The client encrypts their
           nonce, R_CLIENT, and S with the server's public key S_PUB{R_CLIENT} and S_PUB{K}.
           Additionally, the client computes a SHA1 hash of all the handshake messages and K
           (with "CLIENT" appended to the front) These three values are sent to the server.

Server M2: The server decrypts S_PUB{R_CLIENT} and S_PUB{K}. Using R_CLIENT and R_SERVER, they
           compute K and ensure it matches. The server also computes a SHA1 hash of the handshake
           messages and K and ensures that matches. Finally the server computes a SHA1 hash of the 
           handshake messages, K and "SERVER" appened to the front. This proves they could decrypt
           K and that they are the server.

Handshake complete!

------------
Protocol - data transfer
------------
Four keys are generated by each side using the master key K.
    S_ENC - Server's encryption key.
    S_INT - Server's integrity protection key.
    C_ENC - Client's encryption key.
    C_INT - Client's integrity protection key.

Client: Requests the SSL record and waits for the server to respond.

Server: The server sends the encrypted data using SSL records. Each record contains 10 Kbytes
        of plaintext, requiring 5 SSL records to transfer the 50 Kbyte file. The SSL record
        is the same format as discused in the textbook and in the lecture notes.

Client: As each record comes in, the HMAC is checked for each message. If proper, the message
        is decrypted and the plaintext is added to the buffer. Once the entire message is 
        transmitted, the msg is assembled.

Finally, a diff is performed on on the text file to ensure everything worked.

Finished!